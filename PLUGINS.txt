This file tracks changes made in the plugins branch. It was started after the
work was well under way, so the early changes aren't exhaustive.


TestLoader has a new attribute ``DEFAULT_PATTERN``. This is so that the
regex matching plugin can change the default pattern used for test discovery
when no pattern is explicitly provided.

Command line parsing is all done by optparse, removing the use of getopt. This
makes the help messages more consistent but makes the usage messages less
useful in some situations.

unit2 runs test discovery if invoked without any arguments.

unit2 can execute tests in filenames as well as module names - so long as the
module pointed to by the filename is importable from the current directory.

FunctionTestCase.id() returns 'module.funcname' instead of just funcname.

Added util.formatTraceback, the default way of formatting tracebacks. TestCase
has a new formatTraceback method (delegating to util.formatTraceback). TestCase
instances can implement formatTraceback to control how the traceback for errors
and failures are represented.

If you specify test names (modules, classes etc) at the command line they will
be loaded individually using ``loader.loadTestsFromName`` instead of
collectively with ``loader.loadTestsFromNames``. This enables individual names
to be checked to see if they refer to filenames.


TODO:

Certain event attributes should be read only (like extraTests, extraNames etc)
because they should only be extended or modified in place instead of being
replaced.

Add an epilogue to the optparse help messages.

A messaging API for plugins that respects verbosity.

The ``startTestRun`` event needs an alternative way of replacing the default
test run machinery without stopping other plugins from executing. It should
only be possible for *one* plugin to use this.

Should the ``onTestFailEvent`` be able to supress raised exceptions? It should 
also be able to modify the traceback so that bare asserts could be used but
still provide useful diagnostic information. Should this event be fired for
test skips?

Command line options to unittest, like verbosity, should be put into the config
data structure so that they are accessible to plugins.

TestFailEvent needs to be fired on failures in setUpClass and setUpModule etc

Plugin.register and Plugin.unregister aren't precisely complementary. This means
that unregister can only be called once. This may not be an issue.

Plugin.unregister will fail if any events have already been unhooked. This can
easily be fixed.

Custom test outcomes are *not* supported; making interoperating tools or plugins
in the presence of custom outcomes can be very hard.

Should unittest2 have a different config file from unittest, so they can be
configured side-by-side? (``unittest2.cfg`` perhaps.) Alternatively the same
config file could be used with a '[unittest2]' section instead of '[unittest]'.

Should ``StopTestEvent.timeTaken`` (plus startTime / stopTime etc) include the
time for setUp, tearDown and cleanUps? Should this information be available
separately perhaps?

The discovery command line interface has changed a lot and the tests need
reviewing to ensure they still provide full coverage.

Should there be an "excluded-plugins" section in the config files, so projects
can prevent incompatible plugins from being loaded?

Should multiline values in config files be merged instead of overriding each
other. (This is effectively what happens for the plugins list.)

Should ``handleFile`` be fired when a test name is specified at the command
line? (This would be 'tricky' as ``handleFile`` will have to be called for the
containing module and then the correct name pulled out of the module.)
